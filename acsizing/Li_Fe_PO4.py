import numpy as np

class battery_cell(object):

    def __init__(self):
        self.cell_characteristics()

    def cell_characteristics(self):

        self.Vmax = 3.5             # Maximum charge voltage    [V]
        self.Vnom = 3.2             # Nominal voltage           [V]
        self.Vcut = 2.0             # Cut-off voltage           [V]
        self.Cnom = 20              # Nominal capacity          [Ah]
        self.Cmax_d = 5*self.Cnom   # Maximum discharge rate    [Ah]
        self.Cmax_c = 3*self.Cnom   # Maxumum charge rate       [Ah]
        self.mass = 428/1000        # +- 10g cell mass          [kg]
        self.R = 5*1e-3             # Internal resistance       [mOhms]
        self.width = 133            # cell width                [mm]
        self.thickness = 8.50       # cell thickness            [mm]
        self.height = 202           # cell height               [mm]

    def get_Vcell_discharge(self, s_o_c, I):

        if I > self.Cmax_d:
            I = self.Cmax_d
            print("Maxumum current exceeds cell's maximum discharge rate. Limiting current to maximum discharge rate : %iC, I = %f [A]." %(self.cell_c_rate(I), I))
            
        d_o_d = 1 - s_o_c
        dod, Vcell = self.cell_discharge_voltage(I)
        if d_o_d > max(dod):
            print('Depth of Discharge : %f exceeds maximum Depth of Discharge : %f for discharge current I = %f [A], C-rate : %fC' %(d_o_d, max(dod), I, self.cell_c_rate(I)))
            V = self.Vcut
        elif d_o_d < min(dod):
            print('Negative Depth of Discharge detected. State of Charge : %f cannot exceed 1.' %s_o_c)
            V = self.Vmax
        else:
            V = np.NaN

        found = False
        for i in range(len(dod) - 1):
            if not found:
                if d_o_d >= dod[i] and d_o_d <= dod[i + 1]:
                    V = Vcell[i] + (Vcell[i + 1] - Vcell[i])*(d_o_d - dod[i])/(dod[i + 1] - dod[i])
                    found = True
        return V

    def get_max_DOD(self, I):
        dod, Vcell = self.cell_discharge_voltage(I)
        return max(dod)

    def cell_c_rate(self, I):
        return I/self.Cnom

    def cell_efficiency(self, I):
        dod, Vcell = self.cell_discharge_voltage(I)
        dod, Voc = self.cell_open_circuit_voltage(I)
        return dod, Vcell/Voc

    def cell_open_circuit_voltage(self, I):

        dod, Vcell = self.cell_discharge_voltage(I)
        return dod, Vcell + self.R*I

    def cell_soc(self, I, dt, soc_start = 1.):
        if soc_start >= 1. and I < 0:
            b = 0
        else:
            b = 1
        if I < 0:
            I = abs(I)
            a = 1
        else:
            a = -1
        c_rate = self.cell_c_rate(I)
        rc = self.cell_relative_available_capacity(c_rate)
        Cact = self.Cnom*rc
        return min(soc_start + a*b*I/Cact*dt, 1)

    def cell_discharge_voltage(self, I):

        c_rate = self.cell_c_rate(I)

        # @ 25oC

        # C/2

        x0 = np.array([0.0, 0.004002658123713067, 0.011340898614893364, 0.023348898434312402, 0.04603067021581948,
              0.07738493579411748, 0.12408273266274233, 0.18345565600359143, 0.23015345287221628, 0.2755169964352304,
              0.323549046609466, 0.3729152482961932, 0.41961304516481795, 0.464309538419866, 0.5103401831874058,
              0.5663776005056268, 0.6390927006266666, 0.7224816236063536, 0.7925283189092909, 0.8519012931466995,
              0.9066044062627505, 0.944629734782864, 0.9713141901363638, 0.9906603795504038, 0.9973314933887787,
              1.0])
        y0 = np.array([3.4983388482218425, 3.418604703477461, 3.34883718425023, 3.315614592256538, 3.285714335502694,
              3.272425248011565, 3.2691030395058482, 3.2691030395058482, 3.262458495760284, 3.2558139520147193,
              3.2358804475121565, 3.2292359037665923, 3.2192691515153107, 3.2126246077697465, 3.2126246077697465,
              3.2093022725298987, 3.202657855518465, 3.186046559521619, 3.1661129282849254, 3.1262457925456695,
              3.0365448955500063, 2.906976482612695, 2.7009966403732424, 2.431893695917992, 2.212624639453279,
              2.0])

        # C

        x1 = np.array([0.0, 0.0006671012045256016, 0.007338215042900557, 0.02201467057698146, 0.054703138564330706,
              0.09472982159458057, 0.1387591627485435, 0.19012676984196641, 0.2461640853670687, 0.2975316924604916,
              0.3488992486573552, 0.3989326024451675, 0.4503002095385904, 0.5030020190410646, 0.553702423136843,
              0.6030687266166892, 0.677785181247865, 0.7438291675305297, 0.8012007872578021, 0.8699132801516881,
              0.9012674948334266, 0.9299533046970628, 0.9486324438031364, 0.9633088738889376, 0.9713141901363638,
              0.9819880129950114])
        y1 = np.array([3.4983388482218425, 3.405315615986332, 3.315614592256538, 3.262458495760284, 3.232558112272309,
              3.225913568526744, 3.2192691515153107, 3.215946816275463, 3.215946816275463, 3.2093022725298987,
              3.1926909765330524, 3.1926909765330524, 3.17275747203049, 3.1661129282849254, 3.1594683845393607,
              3.1495016322880796, 3.1328903362912337, 3.106312034574845, 3.0631229437981338, 2.9568103706032325,
              2.873753890619003, 2.75083052836378, 2.611295743377579, 2.4584716174319885, 2.308969953460376,
              2.0])


        # 2C

        x2 = np.array([0, 0.0006671012045256016, 0.004669784776518409, 0.01867911365779397, 0.05003337923609201,
              0.09206136587991869, 0.15543694734448094, 0.20480319992776758, 0.2681787813923299, 0.3322214640614177,
              0.40160105815982927, 0.4816544751168885, 0.5570379800560306, 0.6197465112126266, 0.6731154219196265,
              0.7304869398537798, 0.7845230026618647, 0.827885242611302, 0.8585724069850743, 0.8865910647476255,
              0.9112741655909891, 0.9339559119242166, 0.9533022031313751, 0.9613075193788014, 0.9679786332171764,
              0.9713141901363638])
        y2 = np.array([3.50, 3.405315615986332, 3.2956810877539757, 3.2126246077697465, 3.17275747203049,
             3.1661129282849254, 3.1594683845393607, 3.162790719779209, 3.142857088542515, 3.1262457925456695,
             3.1129568317886713, 3.106312034574845, 3.0897007385779993, 3.0697674875436984, 3.0498338563070044,
             3.019933599553161, 2.9800664638139045, 2.913621279826521, 2.8471760958391377, 2.7574748186410822,
             2.6511627523827044, 2.5149501759022215, 2.3421925454540675, 2.2425247694729924, 2.122923488989355,
             2.0])


        # 3C

        x3 = np.array([0, 0.0006671012045256016, 0.0006671012045256016, 0.006671113838374955, 0.024683126291643345,
              0.048032024725955726, 0.08539025204154371, 0.14476317538239286, 0.19813208608939264, 0.25483655371557984,
              0.31354237585190353, 0.3729152482961932, 0.42494995659414175, 0.48365572783390587, 0.5336890816217181,
              0.5917278534500755, 0.6330887388893766, 0.6811207381670524, 0.7224816236063536, 0.7685123701670123,
              0.8052034962780747, 0.8392261157779156, 0.8719146346618243, 0.9086057607728867, 0.9359572664343526,
              0.9526350510302902])
        y3 = np.array([3.4850498874648443, 3.385382111483769, 3.2657807042660005, 3.1694352635247736, 3.1162790402943883,
              3.0897007385779993, 3.076411904555132, 3.076411904555132, 3.059800608558286, 3.059800608558286,
              3.0398668505874618, 3.0332225603101586, 3.019933599553161, 3.0166112643133127, 3.00664425859377,
              2.983388672319621, 2.960132832577211, 2.9335547843290843, 2.8837208963385463, 2.84385376059929,
              2.790697410634774, 2.7209302716099355, 2.611295743377579, 2.4485049919148376, 2.259136065469838,
              2.0])


        if c_rate < 0.5:
            c_rate = 0.5
            x, y = x0, y0
        elif c_rate <= 1.:
            x = 0.5*(x0 + x1)
            y = y0 + (y1 - y0)*(c_rate - 0.5)/(1. - 0.5)
        elif c_rate <= 2.:
            x = 0.5*(x1 + x2)
            y = y1 + (y2 - y1)*(c_rate - 1.)/(2. - 1.)
        elif c_rate <= 3.:
            x = 0.5*(x2 + x3)
            y = y2 + (y3 - y2)*(c_rate - 2.)/(3. - 2.)
        else:
            x = x3
            y = y3

        return x, y
    
    def cell_relative_available_capacity(self, c_rate):

        x = [0., 0.03489640130861505, 0.09596510359869138, 0.19629225736095965, 0.2988004362050164,
            0.39912758996728465, 0.5016357688113413, 0.6215921483097055, 0.7480916030534351, 0.8964013086150491,
            1.0425299890948747, 1.1995637949836424, 1.400218102508179, 1.598691384950927, 1.8037077426390404,
            2]
        y = [100, 99.2745253164557, 99.00870253164557, 98.70965189873418, 98.4992088607595,
            98.30537974683544, 98.1503164556962, 97.98971518987342, 97.82911392405063, 97.63528481012658,
            97.45253164556962, 97.25870253164557, 97.01503164556962, 96.77689873417721, 96.52215189873418,
            96.27848101265823]

        found = False
        rc = 0

        for i in range(len(x) - 1):
            if not found:
                if c_rate >= x[i] and c_rate <= x[i + 1]:
                    rc = y[i] + (y[i + 1] - y[i])*(c_rate - x[i])/(x[i + 1] - x[i])
                    found = True
        return rc/100

